#!/usr/bin/env python3
"""
Analisador de C√≥digo baseado em COCOMO II
Analisa complexidade, esfor√ßo, tempo e recursos necess√°rios para desenvolvimento
"""

import os
import sys
import argparse
from pathlib import Path
from dataclasses import dataclass
from typing import Dict, List, Set
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.tree import Tree
from rich import box
from rich.text import Text


# Extens√µes de arquivo por linguagem
LANGUAGE_EXTENSIONS = {
    'Python': {'.py', '.pyw', '.pyx'},
    'JavaScript': {'.js', '.jsx', '.mjs', '.cjs'},
    'TypeScript': {'.ts', '.tsx'},
    'Java': {'.java'},
    'C': {'.c', '.h'},
    'C++': {'.cpp', '.hpp', '.cc', '.cxx', '.hxx'},
    'C#': {'.cs'},
    'Go': {'.go'},
    'Rust': {'.rs'},
    'PHP': {'.php', '.phtml'},
    'Ruby': {'.rb'},
    'Swift': {'.swift'},
    'Kotlin': {'.kt', '.kts'},
    'Scala': {'.scala'},
    'R': {'.r', '.R'},
    'Shell': {'.sh', '.bash', '.zsh'},
    'SQL': {'.sql'},
    'HTML': {'.html', '.htm'},
    'CSS': {'.css', '.scss', '.sass', '.less'},
    'Vue': {'.vue'},
    'Dart': {'.dart'},
}

# Diret√≥rios e arquivos a serem exclu√≠dos
EXCLUDED_DIRS = {
    'node_modules', '.venv', 'venv', 'env', 'vendor', '__pycache__',
    '.git', '.svn', '.hg', 'dist', 'build', 'target', 'out',
    '.idea', '.vscode', '.vs', 'bin', 'obj', '.gradle', '.next',
    'coverage', '.nyc_output', '.pytest_cache', '.mypy_cache',
    '.tox', '.eggs', '*.egg-info', '.cache'
}

EXCLUDED_FILES = {
    '.pyc', '.pyo', '.so', '.dll', '.dylib', '.exe', '.o',
    '.class', '.jar', '.war', '.min.js', '.min.css', '.map',
    '.lock', 'package-lock.json', 'yarn.lock', 'poetry.lock',
    'Pipfile.lock', 'composer.lock', 'Gemfile.lock'
}


@dataclass
class CodeMetrics:
    """M√©tricas de c√≥digo coletadas"""
    total_lines: int = 0
    code_lines: int = 0
    comment_lines: int = 0
    blank_lines: int = 0
    files_count: int = 0
    languages: Dict[str, int] = None

    def __post_init__(self):
        if self.languages is None:
            self.languages = {}


@dataclass
class CocomoResults:
    """Resultados dos c√°lculos COCOMO II"""
    kloc: float  # Milhares de linhas de c√≥digo
    effort_person_months: float  # Esfor√ßo em pessoa-m√™s
    time_months: float  # Tempo de desenvolvimento em meses
    people_required: float  # Pessoas necess√°rias
    maintenance_people: float  # Pessoas para manuten√ß√£o
    expansion_people: float  # Pessoas para expans√£o
    productivity: float  # Linhas por pessoa-m√™s
    cost_estimate_brl: float  # Estimativa de custo (BRL)
    complexity_level: str  # N√≠vel de complexidade


class CodeAnalyzer:
    """Analisador de c√≥digo com metodologia COCOMO II"""

    def __init__(self, root_path: Path):
        self.root_path = root_path
        self.console = Console()
        self.metrics = CodeMetrics()

    def should_exclude(self, path: Path) -> bool:
        """Verifica se um arquivo ou diret√≥rio deve ser exclu√≠do"""
        # Verifica diret√≥rios exclu√≠dos
        for part in path.parts:
            if part in EXCLUDED_DIRS or part.startswith('.'):
                return True

        # Verifica extens√µes exclu√≠das
        if path.is_file():
            if any(path.name.endswith(ext) for ext in EXCLUDED_FILES):
                return True

        return False

    def detect_language(self, file_path: Path) -> str:
        """Detecta a linguagem de programa√ß√£o do arquivo"""
        suffix = file_path.suffix.lower()
        for language, extensions in LANGUAGE_EXTENSIONS.items():
            if suffix in extensions:
                return language
        return 'Other'

    def count_lines(self, file_path: Path) -> tuple:
        """Conta linhas de c√≥digo, coment√°rios e em branco"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()

            total = len(lines)
            blank = sum(1 for line in lines if line.strip() == '')
            comment = 0
            code = 0

            # Detec√ß√£o simples de coment√°rios (pode ser melhorada)
            for line in lines:
                stripped = line.strip()
                if stripped == '':
                    continue
                elif stripped.startswith(('#', '//', '/*', '*', '--', '<!--')):
                    comment += 1
                else:
                    code += 1

            return total, code, comment, blank
        except Exception as e:
            return 0, 0, 0, 0

    def analyze_directory(self):
        """Analisa recursivamente o diret√≥rio"""
        self.console.print(f"\n[cyan]Analisando:[/cyan] {self.root_path}\n")

        for root, dirs, files in os.walk(self.root_path):
            root_path = Path(root)

            # Remove diret√≥rios exclu√≠dos da busca
            dirs[:] = [d for d in dirs if not self.should_exclude(root_path / d)]

            for file in files:
                file_path = root_path / file

                if self.should_exclude(file_path):
                    continue

                language = self.detect_language(file_path)
                if language == 'Other':
                    continue

                total, code, comment, blank = self.count_lines(file_path)

                self.metrics.total_lines += total
                self.metrics.code_lines += code
                self.metrics.comment_lines += comment
                self.metrics.blank_lines += blank
                self.metrics.files_count += 1

                if language in self.metrics.languages:
                    self.metrics.languages[language] += code
                else:
                    self.metrics.languages[language] = code

    def calculate_cocomo2(self, mode: str = 'organic') -> CocomoResults:
        """
        Calcula m√©tricas usando COCOMO II

        Modos:
        - organic: Projetos pequenos e simples (at√© 50 KLOC)
        - semi-detached: Projetos m√©dios (50-300 KLOC)
        - embedded: Projetos grandes e complexos (>300 KLOC)
        """
        kloc = self.metrics.code_lines / 1000.0

        # Coeficientes COCOMO II baseados no modo
        coefficients = {
            'organic': {'a': 2.4, 'b': 1.05, 'c': 2.5, 'd': 0.38},
            'semi-detached': {'a': 3.0, 'b': 1.12, 'c': 2.5, 'd': 0.35},
            'embedded': {'a': 3.6, 'b': 1.20, 'c': 2.5, 'd': 0.32}
        }

        # Determina modo automaticamente baseado em KLOC
        if kloc <= 50:
            mode = 'organic'
            complexity = 'Baixa'
        elif kloc <= 300:
            mode = 'semi-detached'
            complexity = 'M√©dia'
        else:
            mode = 'embedded'
            complexity = 'Alta'

        coef = coefficients[mode]

        # Esfor√ßo em pessoa-m√™s: E = a * (KLOC)^b
        effort = coef['a'] * (kloc ** coef['b'])

        # Tempo de desenvolvimento em meses: T = c * (E)^d
        time = coef['c'] * (effort ** coef['d'])

        # Pessoas necess√°rias: P = E / T
        people = effort / time if time > 0 else 0

        # Manuten√ß√£o: tipicamente 15-20% da equipe de desenvolvimento
        maintenance = people * 0.18

        # Expans√£o: tipicamente 25-35% da equipe de desenvolvimento
        expansion = people * 0.30

        # Produtividade: LOC por pessoa-m√™s
        productivity = (self.metrics.code_lines / effort) if effort > 0 else 0

        # Estimativa de custo
        # BRL: R$15,000/pessoa-m√™s (m√©dia Brasil para desenvolvedores)
        avg_salary_month_brl = 15000
        cost_brl = effort * avg_salary_month_brl

        return CocomoResults(
            kloc=kloc,
            effort_person_months=effort,
            time_months=time,
            people_required=people,
            maintenance_people=maintenance,
            expansion_people=expansion,
            productivity=productivity,
            cost_estimate_brl=cost_brl,
            complexity_level=complexity
        )

    def display_results(self, cocomo: CocomoResults):
        """Exibe os resultados de forma elegante usando Rich"""

        # Painel principal
        title = Text("AN√ÅLISE COCOMO II", style="bold magenta")
        self.console.print(Panel(title, box=box.DOUBLE, expand=False))

        # Tabela de m√©tricas b√°sicas
        metrics_table = Table(title="üìä M√©tricas de C√≥digo", box=box.ROUNDED, show_header=True, header_style="bold cyan")
        metrics_table.add_column("M√©trica", style="yellow", width=30)
        metrics_table.add_column("Valor", justify="right", style="green")

        metrics_table.add_row("Total de Arquivos", f"{self.metrics.files_count:,}")
        metrics_table.add_row("Total de Linhas", f"{self.metrics.total_lines:,}")
        metrics_table.add_row("Linhas de C√≥digo", f"{self.metrics.code_lines:,}")
        metrics_table.add_row("Linhas de Coment√°rios", f"{self.metrics.comment_lines:,}")
        metrics_table.add_row("Linhas em Branco", f"{self.metrics.blank_lines:,}")
        metrics_table.add_row("KLOC (Milhares de LOC)", f"{cocomo.kloc:.2f}")

        self.console.print("\n")
        self.console.print(metrics_table)

        # Tabela de linguagens
        if self.metrics.languages:
            lang_table = Table(title="üíª Distribui√ß√£o por Linguagem", box=box.ROUNDED, show_header=True, header_style="bold cyan")
            lang_table.add_column("Linguagem", style="yellow", width=20)
            lang_table.add_column("Linhas de C√≥digo", justify="right", style="green")
            lang_table.add_column("Porcentagem", justify="right", style="blue")

            sorted_langs = sorted(self.metrics.languages.items(), key=lambda x: x[1], reverse=True)
            for lang, lines in sorted_langs:
                percentage = (lines / self.metrics.code_lines * 100) if self.metrics.code_lines > 0 else 0
                lang_table.add_row(lang, f"{lines:,}", f"{percentage:.1f}%")

            self.console.print("\n")
            self.console.print(lang_table)

        # Tabela de resultados COCOMO II
        cocomo_table = Table(title="üéØ Resultados COCOMO II", box=box.ROUNDED, show_header=True, header_style="bold cyan")
        cocomo_table.add_column("M√©trica", style="yellow", width=35)
        cocomo_table.add_column("Valor", justify="right", style="green")

        cocomo_table.add_row("N√≠vel de Complexidade", f"{cocomo.complexity_level}")
        cocomo_table.add_row("Esfor√ßo Total (pessoa-m√™s)", f"{cocomo.effort_person_months:.2f}")
        cocomo_table.add_row("Tempo de Desenvolvimento (meses)", f"{cocomo.time_months:.2f}")
        cocomo_table.add_row("Anos de Desenvolvimento", f"{cocomo.time_months / 12:.2f}")
        cocomo_table.add_row("Pessoas Necess√°rias (Desenvolvimento)", f"{cocomo.people_required:.2f}")
        cocomo_table.add_row("Pessoas para Manuten√ß√£o", f"{cocomo.maintenance_people:.2f}")
        cocomo_table.add_row("Pessoas para Expans√£o", f"{cocomo.expansion_people:.2f}")
        cocomo_table.add_row("Produtividade (LOC/pessoa-m√™s)", f"{cocomo.productivity:.0f}")

        self.console.print("\n")
        self.console.print(cocomo_table)

        # Painel de estimativa de custo
        cost_panel = Panel(
            f"[bold green]R$ {cocomo.cost_estimate_brl:,.2f}[/bold green]\n\n"
            f"[dim]Baseado em R$15.000/pessoa-m√™s[/dim]\n"
            f"[dim](m√©dia salarial para desenvolvedores no Brasil)[/dim]",
            title="üí∞ Estimativa de Custo Total",
            box=box.DOUBLE,
            style="bold blue"
        )
        self.console.print("\n")
        self.console.print(cost_panel)

        # Insights e recomenda√ß√µes
        self.console.print("\n")
        insights = Panel(
            self._generate_insights(cocomo),
            title="üí° Insights e Recomenda√ß√µes",
            box=box.ROUNDED,
            style="cyan"
        )
        self.console.print(insights)

    def _generate_insights(self, cocomo: CocomoResults) -> str:
        """Gera insights baseados nos resultados"""
        insights = []

        if cocomo.complexity_level == "Baixa":
            insights.append("‚úì Projeto de baixa complexidade - Ideal para equipes pequenas")
        elif cocomo.complexity_level == "M√©dia":
            insights.append("‚ö° Projeto de complexidade m√©dia - Requer gest√£o adequada")
        else:
            insights.append("‚ö†Ô∏è  Projeto de alta complexidade - Requer gest√£o rigorosa")

        if cocomo.people_required < 5:
            insights.append("‚úì Equipe pequena suficiente para desenvolvimento")
        elif cocomo.people_required < 15:
            insights.append("‚ö° Equipe m√©dia necess√°ria - Considere divis√£o em squads")
        else:
            insights.append("‚ö†Ô∏è  Equipe grande necess√°ria - Estrutura organizacional complexa")

        if cocomo.time_months < 6:
            insights.append("‚úì Tempo de desenvolvimento curto")
        elif cocomo.time_months < 18:
            insights.append("‚ö° Tempo de desenvolvimento m√©dio - Planejamento de releases importante")
        else:
            insights.append("‚ö†Ô∏è  Desenvolvimento de longo prazo - Risco de mudan√ßas tecnol√≥gicas")

        # Recomenda√ß√µes de produtividade
        if cocomo.productivity < 300:
            insights.append("üìâ Produtividade baixa - Considere refatora√ß√£o ou automa√ß√£o")
        elif cocomo.productivity < 600:
            insights.append("üìä Produtividade adequada")
        else:
            insights.append("üìà Alta produtividade - Boas pr√°ticas aplicadas")

        return "\n".join(insights)


def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(
        description='Analisador de c√≥digo baseado em COCOMO II',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        'path',
        nargs='?',
        default='.',
        help='Caminho do diret√≥rio a ser analisado (padr√£o: diret√≥rio atual)'
    )

    args = parser.parse_args()

    path = Path(args.path).resolve()

    if not path.exists():
        Console().print(f"[bold red]Erro:[/bold red] Caminho '{path}' n√£o encontrado")
        sys.exit(1)

    if not path.is_dir():
        Console().print(f"[bold red]Erro:[/bold red] '{path}' n√£o √© um diret√≥rio")
        sys.exit(1)

    # Executa an√°lise
    analyzer = CodeAnalyzer(path)
    analyzer.analyze_directory()

    if analyzer.metrics.files_count == 0:
        Console().print("[bold yellow]Aviso:[/bold yellow] Nenhum arquivo de c√≥digo encontrado")
        sys.exit(0)

    # Calcula COCOMO II
    cocomo_results = analyzer.calculate_cocomo2()

    # Exibe resultados
    analyzer.display_results(cocomo_results)


if __name__ == "__main__":
    main()
