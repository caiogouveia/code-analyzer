"""Telas modais para a interface TUI."""

from __future__ import annotations

from pathlib import Path
from typing import Optional

from textual.screen import Screen, ModalScreen
from textual.containers import Container, Horizontal, ScrollableContainer
from textual.widgets import Button, Static, Input, DirectoryTree
from textual.app import ComposeResult
from textual.binding import Binding
from textual import on


class DirectoryBrowserScreen(ModalScreen):
    """Tela de navega√ß√£o de diret√≥rios"""

    BINDINGS = [
        Binding("escape", "cancel", "Cancelar"),
    ]

    CSS = """
    DirectoryBrowserScreen {
        align: center middle;
    }

    #browser-container {
        width: 90;
        height: auto;
        max-height: 95%;
        border: heavy $primary;
        background: $surface;
        padding: 1;
    }

    #browser-title {
        text-align: center;
        text-style: bold;
        color: $accent;
        margin-bottom: 1;
    }

    #current-path {
        color: $text-muted;
        margin-bottom: 1;
    }

    #path-input {
        width: 100%;
        margin-bottom: 1;
    }

    .nav-buttons {
        height: auto;
        margin-bottom: 1;
    }

    #directory-tree {
        height: 12;
        border: solid $primary;
        margin: 1 0;
    }

    #git-indicator {
        text-align: center;
        margin: 1 0;
        height: auto;
    }

    #validation-indicator {
        text-align: center;
        margin: 1 0;
        padding: 1;
        border: solid $primary;
        height: auto;
    }

    .browser-buttons {
        height: auto;
        align: center middle;
        margin-top: 1;
    }
    """

    def __init__(self, initial_path: Optional[Path] = None):
        super().__init__()
        self.selected_path = initial_path or Path.cwd()
        self.is_valid_directory = False

    def compose(self) -> ComposeResult:
        with ScrollableContainer(id="browser-container"):
            yield Static("üìÇ Selecionar Diret√≥rio do Projeto", id="browser-title")

            with Horizontal(classes="nav-buttons"):
                yield Button("‚¨ÜÔ∏è Diret√≥rio Superior", variant="default", id="btn-parent")
                yield Button("üè† Diret√≥rio Home", variant="default", id="btn-home")

            yield Static("Caminho:", id="current-path")
            yield Input(
                value=str(self.selected_path),
                placeholder="Digite o caminho ou navegue abaixo",
                id="path-input"
            )

            yield DirectoryTree(str(self.selected_path), id="directory-tree")
            yield Static("Verificando Git...", id="git-indicator")
            yield Static("Validando diret√≥rio...", id="validation-indicator")

            with Horizontal(classes="browser-buttons"):
                yield Button("‚úì OK - Confirmar Sele√ß√£o", variant="success", id="btn-ok", disabled=True)
                yield Button("‚úó Cancelar", variant="error", id="btn-cancel")

    def on_mount(self) -> None:
        """Inicializa o navegador"""
        tree = self.query_one(DirectoryTree)
        tree.focus()
        self.set_timer(0.1, self.validate_directory)

    @on(DirectoryTree.DirectorySelected)
    def on_directory_selected(self, event: DirectoryTree.DirectorySelected) -> None:
        """Atualiza o caminho selecionado quando um diret√≥rio √© escolhido"""
        self.selected_path = Path(event.path)
        self.update_path_display()
        self.validate_directory()

    def update_path_display(self) -> None:
        """Atualiza a exibi√ß√£o do caminho"""
        path_input = self.query_one("#path-input", Input)
        path_input.value = str(self.selected_path)

    def update_git_indicator(self) -> None:
        """Atualiza o indicador de reposit√≥rio Git"""
        indicator = self.query_one("#git-indicator", Static)

        if (self.selected_path / '.git').exists():
            indicator.update("‚úì Este √© um reposit√≥rio Git v√°lido")
            indicator.styles.color = "green"
        else:
            indicator.update("‚ö† Este diret√≥rio N√ÉO √© um reposit√≥rio Git")
            indicator.styles.color = "yellow"

    def validate_directory(self) -> None:
        """Valida se o diret√≥rio √© adequado para an√°lise"""
        self.update_git_indicator()

        validation_indicator = self.query_one("#validation-indicator", Static)
        ok_button = self.query_one("#btn-ok", Button)

        # Verifica se √© um diret√≥rio v√°lido
        if not self.selected_path.exists():
            validation_indicator.update("‚ùå ERRO: Caminho n√£o existe")
            validation_indicator.styles.color = "red"
            validation_indicator.styles.background = "darkred"
            ok_button.disabled = True
            self.is_valid_directory = False
            return

        if not self.selected_path.is_dir():
            validation_indicator.update("‚ùå ERRO: N√£o √© um diret√≥rio")
            validation_indicator.styles.color = "red"
            validation_indicator.styles.background = "darkred"
            ok_button.disabled = True
            self.is_valid_directory = False
            return

        # Verifica se tem arquivos de c√≥digo analis√°veis
        from main import LANGUAGE_EXTENSIONS
        code_files_found = []
        extensions_found = set()

        try:
            max_depth = 5
            max_files_to_check = 50

            def scan_directory(path: Path, depth: int = 0) -> None:
                if depth > max_depth or len(code_files_found) >= max_files_to_check:
                    return

                try:
                    exclude_dirs = {
                        'node_modules', '.git', '__pycache__', '.venv', 'venv',
                        '.mypy_cache', '.pytest_cache', 'dist', 'build', '.tox'
                    }

                    for item in path.iterdir():
                        if len(code_files_found) >= max_files_to_check:
                            break

                        if item.is_file():
                            suffix = item.suffix
                            for ext_list in LANGUAGE_EXTENSIONS.values():
                                if suffix in ext_list:
                                    code_files_found.append(str(item))
                                    extensions_found.add(suffix)
                                    break
                        elif item.is_dir() and item.name not in exclude_dirs:
                            scan_directory(item, depth + 1)

                except PermissionError:
                    pass

            scan_directory(self.selected_path)

            if not code_files_found:
                validation_indicator.update("‚ö†Ô∏è AVISO: Nenhum arquivo de c√≥digo detectado")
                validation_indicator.styles.color = "yellow"
                validation_indicator.styles.background = "darkgoldenrod"
                ok_button.disabled = True
                self.is_valid_directory = False
                return

            count = len(code_files_found)
            more_indicator = "+" if count >= max_files_to_check else ""
            langs_text = ", ".join(sorted(extensions_found)[:5])
            validation_indicator.update(
                f"‚úÖ Diret√≥rio v√°lido! ({count}{more_indicator} arquivos: {langs_text})"
            )
            validation_indicator.styles.color = "green"
            validation_indicator.styles.background = "darkgreen"
            ok_button.disabled = False
            self.is_valid_directory = True

        except Exception as e:
            validation_indicator.update(f"‚ö†Ô∏è ERRO ao validar: {str(e)[:50]}")
            validation_indicator.styles.color = "red"
            validation_indicator.styles.background = "darkred"
            ok_button.disabled = True
            self.is_valid_directory = False

    def reload_tree(self) -> None:
        """Recarrega a √°rvore de diret√≥rios para o caminho atual"""
        tree = self.query_one("#directory-tree", DirectoryTree)
        tree.path = str(self.selected_path)
        tree.reload()
        self.update_path_display()
        self.validate_directory()

    @on(Input.Submitted, "#path-input")
    def on_path_input_submitted(self, event: Input.Submitted) -> None:
        """Quando o usu√°rio digita um caminho e pressiona Enter"""
        new_path_str = event.value.strip()

        if not new_path_str:
            return

        try:
            new_path = Path(new_path_str).expanduser().resolve()

            if not new_path.exists():
                event.input.value = str(self.selected_path)
                return

            if not new_path.is_dir():
                event.input.value = str(self.selected_path)
                return

            self.selected_path = new_path
            self.reload_tree()

        except Exception:
            event.input.value = str(self.selected_path)

    @on(Button.Pressed, "#btn-parent")
    def on_parent_button_pressed(self) -> None:
        """Navega para o diret√≥rio pai"""
        parent = self.selected_path.parent

        if parent != self.selected_path:
            self.selected_path = parent
            self.reload_tree()

    @on(Button.Pressed, "#btn-home")
    def on_home_button_pressed(self) -> None:
        """Navega para o diret√≥rio home do usu√°rio"""
        self.selected_path = Path.home()
        self.reload_tree()

    @on(Button.Pressed, "#btn-ok")
    def action_select_directory(self) -> None:
        """Confirma sele√ß√£o do diret√≥rio"""
        if not self.is_valid_directory:
            return

        self.dismiss(self.selected_path)

    @on(Button.Pressed, "#btn-cancel")
    def action_cancel(self) -> None:
        """Cancela a sele√ß√£o"""
        self.dismiss(None)


class WelcomeScreen(Screen):
    """Tela de boas-vindas e configura√ß√£o"""

    BINDINGS = [
        Binding("escape", "app.pop_screen", "Voltar"),
    ]

    CSS = """
    WelcomeScreen {
        align: center middle;
    }

    #welcome-container {
        width: 80;
        height: auto;
        border: heavy $primary;
        background: $surface;
        padding: 2;
    }

    #title {
        text-align: center;
        text-style: bold;
        color: $accent;
        margin-bottom: 1;
    }

    #subtitle {
        text-align: center;
        color: $text-muted;
        margin-bottom: 2;
    }

    .info-text {
        margin: 1 0;
        color: $text;
    }

    #path-input {
        width: 70%;
        margin: 1 0;
    }

    #browse-btn {
        width: 25%;
        margin: 1 0;
    }

    .path-container {
        width: 100%;
        height: auto;
    }

    #analyze-btn {
        width: 100%;
        margin-top: 1;
    }
    """

    def compose(self) -> ComposeResult:
        with Container(id="welcome-container"):
            yield Static("üöÄ COCOMO II + Git Analyzer", id="title")
            yield Static("An√°lise Integrada de C√≥digo e Reposit√≥rio", id="subtitle")

            yield Static("üìÅ Caminho do Projeto:", classes="info-text")
            with Horizontal(classes="path-container"):
                yield Input(
                    placeholder="./path/to/project ou deixe vazio para usar diret√≥rio atual",
                    id="path-input"
                )
                yield Button("üìÇ Navegar...", variant="default", id="browse-btn")

            yield Static("\nüí∞ Sal√°rio Mensal (BRL/pessoa-m√™s):", classes="info-text")
            yield Input(
                placeholder="15000",
                value="15000",
                id="salary-input"
            )

            yield Button("üîç Iniciar An√°lise", variant="primary", id="analyze-btn")

            yield Static("\nüí° Dicas:", classes="info-text")
            yield Static(
                "‚Ä¢ O projeto deve ser um reposit√≥rio Git\n"
                "‚Ä¢ Sal√°rio padr√£o: R$ 15.000/m√™s por pessoa\n"
                "‚Ä¢ Pressione TAB para navegar entre campos\n"
                "‚Ä¢ Pressione ESC para voltar",
                classes="info-text"
            )

    @on(Button.Pressed, "#browse-btn")
    def browse_directory(self) -> None:
        """Abre o navegador de diret√≥rios"""
        path_input = self.query_one("#path-input", Input)
        current_path = path_input.value.strip() or "."

        try:
            initial_path = Path(current_path).resolve()
            if not initial_path.exists() or not initial_path.is_dir():
                initial_path = Path.cwd()
        except Exception:
            initial_path = Path.cwd()

        def on_directory_selected(selected_path: Optional[Path]) -> None:
            if selected_path:
                path_input.value = str(selected_path)

        self.app.push_screen(DirectoryBrowserScreen(initial_path), on_directory_selected)

    @on(Button.Pressed, "#analyze-btn")
    def start_analysis(self) -> None:
        """Inicia a an√°lise"""
        path_input = self.query_one("#path-input", Input)
        project_path = path_input.value.strip() or "."

        path = Path(project_path).resolve()

        if not path.exists():
            self.app.push_screen(ErrorScreen(f"Caminho n√£o encontrado: {path}"))
            return

        if not path.is_dir():
            self.app.push_screen(ErrorScreen(f"Caminho n√£o √© um diret√≥rio: {path}"))
            return

        if not (path / '.git').exists():
            self.app.push_screen(ErrorScreen(f"N√£o √© um reposit√≥rio Git: {path}"))
            return

        # Captura o sal√°rio customizado
        salary_input = self.query_one("#salary-input", Input)
        try:
            salary = float(salary_input.value.strip().replace(',', '.'))
            if salary <= 0:
                self.app.push_screen(ErrorScreen("Sal√°rio deve ser um valor positivo"))
                return
            self.app.custom_salary = salary
        except ValueError:
            self.app.push_screen(ErrorScreen("Valor de sal√°rio inv√°lido. Use apenas n√∫meros."))
            return

        # Fecha a tela e inicia an√°lise
        self.app.pop_screen()
        self.app.start_analysis(path)


class ErrorScreen(Screen):
    """Tela de erro"""

    BINDINGS = [
        Binding("escape", "app.pop_screen", "Voltar"),
        Binding("enter", "app.pop_screen", "Voltar"),
    ]

    CSS = """
    ErrorScreen {
        align: center middle;
    }

    #error-container {
        width: 60;
        height: auto;
        border: heavy $error;
        background: $surface;
        padding: 2;
    }

    #error-title {
        text-align: center;
        text-style: bold;
        color: $error;
        margin-bottom: 1;
    }

    #error-message {
        text-align: center;
        margin: 1 0;
    }
    """

    def __init__(self, message: str):
        super().__init__()
        self.message = message

    def compose(self) -> ComposeResult:
        with Container(id="error-container"):
            yield Static("‚ùå ERRO", id="error-title")
            yield Static(self.message, id="error-message")
            yield Static("\nPressione ESC ou ENTER para voltar", id="error-hint")
