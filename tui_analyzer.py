#!/usr/bin/env python3
"""
App TUI Integrado para An√°lise COCOMO II + Git
Usando Textual (textualize.io)
"""

import os
import json
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Optional
from dataclasses import asdict
from dotenv import load_dotenv

from textual.app import App, ComposeResult
from textual.containers import Container, Horizontal, Vertical, ScrollableContainer
from textual.widgets import (
    Header, Footer, Button, Static, Input, Label,
    DataTable, TabbedContent, TabPane, ProgressBar, Markdown, DirectoryTree
)
from textual.binding import Binding
from textual.screen import Screen, ModalScreen
from textual.worker import Worker
from textual import work
from textual import on

# Importa os m√≥dulos existentes
from main import CodeAnalyzer, CocomoResults
from git_analyzer import GitAnalyzer, GitMetrics, IntegratedAnalyzer, IntegratedMetrics
from generate_pdf_report import generate_pdf_report
from security_analyzer import SecurityAnalyzer, SecurityMetrics, SecurityFinding

load_dotenv()  # Carrega vari√°veis de ambiente do .env

class DirectoryBrowserScreen(ModalScreen):
    """Tela de navega√ß√£o de diret√≥rios"""

    BINDINGS = [
        Binding("escape", "cancel", "Cancelar"),
    ]

    CSS = """
    DirectoryBrowserScreen {
        align: center middle;
    }

    #browser-container {
        width: 90;
        height: auto;
        max-height: 95%;
        border: heavy $primary;
        background: $surface;
        padding: 1;
    }

    #browser-title {
        text-align: center;
        text-style: bold;
        color: $accent;
        margin-bottom: 1;
    }

    #current-path {
        color: $text-muted;
        margin-bottom: 1;
    }

    #path-input {
        width: 100%;
        margin-bottom: 1;
    }

    .nav-buttons {
        height: auto;
        margin-bottom: 1;
    }

    #directory-tree {
        height: 12;
        border: solid $primary;
        margin: 1 0;
    }

    #git-indicator {
        text-align: center;
        margin: 1 0;
        height: auto;
    }

    #validation-indicator {
        text-align: center;
        margin: 1 0;
        padding: 1;
        border: solid $primary;
        height: auto;
    }

    .browser-buttons {
        height: auto;
        align: center middle;
        margin-top: 1;
    }
    """

    def __init__(self, initial_path: Optional[Path] = None):
        super().__init__()
        self.selected_path = initial_path or Path.cwd()
        self.is_valid_directory = False

    def compose(self) -> ComposeResult:
        with ScrollableContainer(id="browser-container"):
            yield Static("üìÇ Selecionar Diret√≥rio do Projeto", id="browser-title")

            with Horizontal(classes="nav-buttons"):
                yield Button("‚¨ÜÔ∏è Diret√≥rio Superior", variant="default", id="btn-parent")
                yield Button("üè† Diret√≥rio Home", variant="default", id="btn-home")

            yield Static("Caminho:", id="current-path")
            yield Input(
                value=str(self.selected_path),
                placeholder="Digite o caminho ou navegue abaixo",
                id="path-input"
            )

            yield DirectoryTree(str(self.selected_path), id="directory-tree")
            yield Static("Verificando Git...", id="git-indicator")
            yield Static("Validando diret√≥rio...", id="validation-indicator")

            with Horizontal(classes="browser-buttons"):
                yield Button("‚úì OK - Confirmar Sele√ß√£o", variant="success", id="btn-ok", disabled=True)
                yield Button("‚úó Cancelar", variant="error", id="btn-cancel")

    def on_mount(self) -> None:
        """Inicializa o navegador"""
        tree = self.query_one(DirectoryTree)
        tree.focus()
        # Executa valida√ß√£o ap√≥s um pequeno delay para garantir que tudo esteja renderizado
        self.set_timer(0.1, self.validate_directory)

    @on(DirectoryTree.DirectorySelected)
    def on_directory_selected(self, event: DirectoryTree.DirectorySelected) -> None:
        """Atualiza o caminho selecionado quando um diret√≥rio √© escolhido"""
        self.selected_path = Path(event.path)
        self.update_path_display()
        self.validate_directory()

    def update_path_display(self) -> None:
        """Atualiza a exibi√ß√£o do caminho"""
        path_input = self.query_one("#path-input", Input)
        path_input.value = str(self.selected_path)

    def update_git_indicator(self) -> None:
        """Atualiza o indicador de reposit√≥rio Git"""
        indicator = self.query_one("#git-indicator", Static)

        if (self.selected_path / '.git').exists():
            indicator.update("‚úì Este √© um reposit√≥rio Git v√°lido")
            indicator.styles.color = "green"
        else:
            indicator.update("‚ö† Este diret√≥rio N√ÉO √© um reposit√≥rio Git")
            indicator.styles.color = "yellow"

    def validate_directory(self) -> None:
        """Valida se o diret√≥rio √© adequado para an√°lise"""
        self.update_git_indicator()
        
        validation_indicator = self.query_one("#validation-indicator", Static)
        ok_button = self.query_one("#btn-ok", Button)
        
        # Verifica se √© um diret√≥rio v√°lido
        if not self.selected_path.exists():
            validation_indicator.update("‚ùå ERRO: Caminho n√£o existe")
            validation_indicator.styles.color = "red"
            validation_indicator.styles.background = "darkred"
            ok_button.disabled = True
            self.is_valid_directory = False
            return
        
        if not self.selected_path.is_dir():
            validation_indicator.update("‚ùå ERRO: N√£o √© um diret√≥rio")
            validation_indicator.styles.color = "red"
            validation_indicator.styles.background = "darkred"
            ok_button.disabled = True
            self.is_valid_directory = False
            return
        
        # Verifica se tem arquivos de c√≥digo analis√°veis
        from main import LANGUAGE_EXTENSIONS
        code_files_found = []
        extensions_found = set()
        
        try:
            # Busca arquivos de c√≥digo de forma mais eficiente
            # Limita a busca em profundidade para evitar travamentos
            max_depth = 5
            max_files_to_check = 50
            
            def scan_directory(path: Path, depth: int = 0) -> None:
                if depth > max_depth or len(code_files_found) >= max_files_to_check:
                    return
                
                try:
                    # Ignora diret√≥rios comuns que n√£o devem ser analisados
                    exclude_dirs = {
                        'node_modules', '.git', '__pycache__', '.venv', 'venv',
                        '.mypy_cache', '.pytest_cache', 'dist', 'build', '.tox'
                    }
                    
                    for item in path.iterdir():
                        if len(code_files_found) >= max_files_to_check:
                            break
                        
                        if item.is_file():
                            # Verifica se a extens√£o √© suportada
                            suffix = item.suffix
                            for ext_list in LANGUAGE_EXTENSIONS.values():
                                if suffix in ext_list:
                                    code_files_found.append(str(item))
                                    extensions_found.add(suffix)
                                    break
                        elif item.is_dir() and item.name not in exclude_dirs:
                            scan_directory(item, depth + 1)
                
                except PermissionError:
                    pass  # Ignora diret√≥rios sem permiss√£o
            
            scan_directory(self.selected_path)
            
            if not code_files_found:
                validation_indicator.update("‚ö†Ô∏è AVISO: Nenhum arquivo de c√≥digo detectado neste diret√≥rio")
                validation_indicator.styles.color = "yellow"
                validation_indicator.styles.background = "darkgoldenrod"
                ok_button.disabled = True
                self.is_valid_directory = False
                return
            
            # Diret√≥rio v√°lido!
            count = len(code_files_found)
            more_indicator = "+" if count >= max_files_to_check else ""
            langs_text = ", ".join(sorted(extensions_found)[:5])
            validation_indicator.update(
                f"‚úÖ Diret√≥rio v√°lido! ({count}{more_indicator} arquivos: {langs_text})"
            )
            validation_indicator.styles.color = "green"
            validation_indicator.styles.background = "darkgreen"
            ok_button.disabled = False
            self.is_valid_directory = True
            
        except Exception as e:
            validation_indicator.update(f"‚ö†Ô∏è ERRO ao validar: {str(e)[:50]}")
            validation_indicator.styles.color = "red"
            validation_indicator.styles.background = "darkred"
            ok_button.disabled = True
            self.is_valid_directory = False

    def reload_tree(self) -> None:
        """Recarrega a √°rvore de diret√≥rios para o caminho atual"""
        tree = self.query_one("#directory-tree", DirectoryTree)
        tree.path = str(self.selected_path)
        tree.reload()
        self.update_path_display()
        self.validate_directory()

    @on(Input.Submitted, "#path-input")
    def on_path_input_submitted(self, event: Input.Submitted) -> None:
        """Quando o usu√°rio digita um caminho e pressiona Enter"""
        new_path_str = event.value.strip()

        if not new_path_str:
            return

        try:
            new_path = Path(new_path_str).expanduser().resolve()

            if not new_path.exists():
                event.input.value = str(self.selected_path)
                return

            if not new_path.is_dir():
                event.input.value = str(self.selected_path)
                return

            self.selected_path = new_path
            self.reload_tree()

        except Exception:
            event.input.value = str(self.selected_path)

    @on(Button.Pressed, "#btn-parent")
    def on_parent_button_pressed(self) -> None:
        """Navega para o diret√≥rio pai"""
        parent = self.selected_path.parent

        if parent != self.selected_path:  # Verifica se n√£o est√° na raiz
            self.selected_path = parent
            self.reload_tree()

    @on(Button.Pressed, "#btn-home")
    def on_home_button_pressed(self) -> None:
        """Navega para o diret√≥rio home do usu√°rio"""
        self.selected_path = Path.home()
        self.reload_tree()

    @on(Button.Pressed, "#btn-ok")
    def action_select_directory(self) -> None:
        """Confirma sele√ß√£o do diret√≥rio"""
        if not self.is_valid_directory:
            return  # N√£o permite sele√ß√£o se n√£o for v√°lido
        
        self.dismiss(self.selected_path)

    @on(Button.Pressed, "#btn-cancel")
    def action_cancel(self) -> None:
        """Cancela a sele√ß√£o"""
        self.dismiss(None)


class WelcomeScreen(Screen):
    """Tela de boas-vindas e configura√ß√£o"""

    BINDINGS = [
        Binding("escape", "app.pop_screen", "Voltar"),
    ]

    CSS = """
    WelcomeScreen {
        align: center middle;
    }

    #welcome-container {
        width: 80;
        height: auto;
        border: heavy $primary;
        background: $surface;
        padding: 2;
    }

    #title {
        text-align: center;
        text-style: bold;
        color: $accent;
        margin-bottom: 1;
    }

    #subtitle {
        text-align: center;
        color: $text-muted;
        margin-bottom: 2;
    }

    .info-text {
        margin: 1 0;
        color: $text;
    }

    #path-input {
        width: 70%;
        margin: 1 0;
    }

    #browse-btn {
        width: 25%;
        margin: 1 0;
    }

    .path-container {
        width: 100%;
        height: auto;
    }

    #analyze-btn {
        width: 100%;
        margin-top: 1;
    }
    """

    def compose(self) -> ComposeResult:
        with Container(id="welcome-container"):
            yield Static("üöÄ COCOMO II + Git Analyzer", id="title")
            yield Static("An√°lise Integrada de C√≥digo e Reposit√≥rio", id="subtitle")

            yield Static("üìÅ Caminho do Projeto:", classes="info-text")
            with Horizontal(classes="path-container"):
                yield Input(
                    placeholder="./path/to/project ou deixe vazio para usar diret√≥rio atual",
                    id="path-input"
                )
                yield Button("üìÇ Navegar...", variant="default", id="browse-btn")

            yield Static("\nüí∞ Sal√°rio Mensal (BRL/pessoa-m√™s):", classes="info-text")
            yield Input(
                placeholder="15000",
                value="15000",
                id="salary-input"
            )

            yield Button("üîç Iniciar An√°lise", variant="primary", id="analyze-btn")

            yield Static("\nüí° Dicas:", classes="info-text")
            yield Static(
                "‚Ä¢ O projeto deve ser um reposit√≥rio Git\n"
                "‚Ä¢ Sal√°rio padr√£o: R$ 15.000/m√™s por pessoa\n"
                "‚Ä¢ Pressione TAB para navegar entre campos\n"
                "‚Ä¢ Pressione ESC para voltar",
                classes="info-text"
            )

    @on(Button.Pressed, "#browse-btn")
    def browse_directory(self) -> None:
        """Abre o navegador de diret√≥rios"""
        path_input = self.query_one("#path-input", Input)
        current_path = path_input.value.strip() or "."

        try:
            initial_path = Path(current_path).resolve()
            if not initial_path.exists() or not initial_path.is_dir():
                initial_path = Path.cwd()
        except Exception:
            initial_path = Path.cwd()

        def on_directory_selected(selected_path: Optional[Path]) -> None:
            """Callback quando um diret√≥rio √© selecionado"""
            if selected_path:
                path_input.value = str(selected_path)

        self.app.push_screen(DirectoryBrowserScreen(initial_path), on_directory_selected)

    @on(Button.Pressed, "#analyze-btn")
    def start_analysis(self) -> None:
        """Inicia a an√°lise"""
        path_input = self.query_one("#path-input", Input)
        project_path = path_input.value.strip() or "."

        # Valida o caminho
        path = Path(project_path).resolve()

        if not path.exists():
            self.app.push_screen(ErrorScreen(f"Caminho n√£o encontrado: {path}"))
            return

        if not path.is_dir():
            self.app.push_screen(ErrorScreen(f"Caminho n√£o √© um diret√≥rio: {path}"))
            return

        if not (path / '.git').exists():
            self.app.push_screen(ErrorScreen(f"N√£o √© um reposit√≥rio Git: {path}"))
            return

        # Captura o sal√°rio customizado
        salary_input = self.query_one("#salary-input", Input)
        try:
            salary = float(salary_input.value.strip().replace(',', '.'))
            if salary <= 0:
                self.app.push_screen(ErrorScreen("Sal√°rio deve ser um valor positivo"))
                return
            self.app.custom_salary = salary
        except ValueError:
            self.app.push_screen(ErrorScreen("Valor de sal√°rio inv√°lido. Use apenas n√∫meros."))
            return

        # Fecha a tela de boas-vindas e inicia an√°lise
        self.app.pop_screen()
        self.app.start_analysis(path)


class ErrorScreen(Screen):
    """Tela de erro"""

    BINDINGS = [
        Binding("escape", "app.pop_screen", "Voltar"),
        Binding("enter", "app.pop_screen", "Voltar"),
    ]

    CSS = """
    ErrorScreen {
        align: center middle;
    }

    #error-container {
        width: 60;
        height: auto;
        border: heavy $error;
        background: $surface;
        padding: 2;
    }

    #error-title {
        text-align: center;
        text-style: bold;
        color: $error;
        margin-bottom: 1;
    }

    #error-message {
        text-align: center;
        margin: 1 0;
    }
    """

    def __init__(self, message: str):
        super().__init__()
        self.message = message

    def compose(self) -> ComposeResult:
        with Container(id="error-container"):
            yield Static("‚ùå ERRO", id="error-title")
            yield Static(self.message, id="error-message")
            yield Static("\nPressione ESC ou ENTER para voltar", id="error-hint")


class CocomoIIAnalyzerApp(App):
    """App principal TUI"""

    CSS = """
    Screen {
        background: $surface;
    }

    #main-container {
        width: 100%;
        height: 100%;
        padding: 1;
    }

    TabPane {
        padding: 1;
    }

    .metrics-table {
        height: auto;
        margin: 1 0;
    }

    .action-buttons {
        height: auto;
        align: center middle;
        margin: 1 0;
    }

    Button {
        margin: 0 1;
    }

    .status-text {
        text-align: center;
        color: $text-muted;
        margin: 1 0;
    }

    .section-title {
        text-style: bold;
        color: $accent;
        margin: 1 0;
    }

    ProgressBar {
        margin: 1 0;
    }

    #analysis-progress {
        display: none;
        margin: 1 2;
    }

    #progress-label {
        display: none;
        text-align: center;
        margin-top: 1;
    }

    .info-text {
        margin: 1 0;
        color: $text;
    }
    """

    BINDINGS = [
        Binding("q", "quit", "Sair"),
        Binding("r", "reload", "Recarregar"),
        Binding("e", "export_json", "Exportar JSON"),
        Binding("p", "export_pdf", "Exportar PDF"),
        Binding("n", "new_analysis", "Nova An√°lise"),
        Binding("i", "generate_ai_insights", "Gerar Insights IA"),
    ]

    TITLE = "COCOMO II + Git Analyzer"
    SUB_TITLE = "An√°lise Integrada de C√≥digo e Reposit√≥rio"

    def __init__(self):
        super().__init__()
        self.project_path: Optional[Path] = None
        self.cocomo_results: Optional[CocomoResults] = None
        self.git_metrics: Optional[GitMetrics] = None
        self.integrated_metrics: Optional[IntegratedMetrics] = None
        self.security_metrics: Optional[SecurityMetrics] = None
        self.code_analyzer: Optional[CodeAnalyzer] = None
        self.ai_insights_generated: bool = False
        self.ai_insights_data: Optional[dict] = None
        self.custom_salary: float = 15000.0  # Sal√°rio padr√£o em BRL/m√™s

    def compose(self) -> ComposeResult:
        yield Header()

        with Container(id="main-container"):
            # Barra de progresso global (inicialmente oculta)
            yield Static("", id="progress-label", classes="status-text")
            yield ProgressBar(id="analysis-progress", total=100, show_eta=False)

            with TabbedContent(initial="tab-welcome"):
                with TabPane("üè† In√≠cio", id="tab-welcome"):
                    yield Static("Bem-vindo ao COCOMO II + Git Analyzer!", classes="section-title")
                    yield Static(
                        "Selecione 'Nova An√°lise' abaixo para come√ßar ou pressione 'n' para nova an√°lise.",
                        classes="status-text"
                    )
                    with Horizontal(classes="action-buttons"):
                        yield Button("üîç Nova An√°lise", variant="primary", id="btn-new-analysis")
                        yield Button("üìÇ Analisar Diret√≥rio Atual", variant="success", id="btn-analyze-current")

                with TabPane("üìä COCOMO II", id="tab-cocomo"):
                    yield Static("An√°lise COCOMO II", classes="section-title")
                    yield DataTable(id="cocomo-table", classes="metrics-table")
                    yield Static("Aguardando an√°lise...", id="cocomo-status", classes="status-text")

                with TabPane("üìà Git", id="tab-git"):
                    yield Static("An√°lise do Reposit√≥rio Git", classes="section-title")
                    yield DataTable(id="git-table", classes="metrics-table")
                    yield Static("\nTop 10 Contribuidores", classes="section-title")
                    yield DataTable(id="authors-table", classes="metrics-table")
                    yield Static("Aguardando an√°lise...", id="git-status", classes="status-text")

                with TabPane("üéØ Integrado", id="tab-integrated"):
                    yield Static("An√°lise Integrada", classes="section-title")
                    yield DataTable(id="integrated-table", classes="metrics-table")
                    yield Static("\nüí° Insights e Recomenda√ß√µes", classes="section-title")
                    yield Static("", id="insights-text", classes="info-text")
                    yield Static("Aguardando an√°lise...", id="integrated-status", classes="status-text")

                with TabPane("üîí Seguran√ßa", id="tab-security"):
                    yield Static("An√°lise de Seguran√ßa (Semgrep)", classes="section-title")
                    yield Static(
                        "An√°lise automatizada de vulnerabilidades e problemas de seguran√ßa no c√≥digo.\n"
                        "Requer o Semgrep instalado no sistema.",
                        classes="info-text"
                    )

                    with Horizontal(classes="action-buttons"):
                        yield Button("üîç Executar An√°lise de Seguran√ßa", variant="primary", id="btn-run-security")

                    yield Static("", id="security-status", classes="status-text")

                    yield Static("\nüìä M√©tricas de Seguran√ßa", classes="section-title")
                    yield DataTable(id="security-metrics-table", classes="metrics-table")

                    yield Static("\n‚ö†Ô∏è Top 10 Arquivos com Problemas", classes="section-title")
                    yield DataTable(id="vulnerable-files-table", classes="metrics-table")

                    yield Static("\nüö® Descobertas Cr√≠ticas e Altas", classes="section-title")
                    yield DataTable(id="critical-findings-table", classes="metrics-table")

                with TabPane("ü§ñ Insights IA", id="tab-ai-insights"):
                    yield Static("Insights Gerados por Intelig√™ncia Artificial", classes="section-title")
                    yield Static(
                        "Use IA para obter an√°lises avan√ßadas sobre valor do c√≥digo e m√©tricas de mercado.\n"
                        "Requer uma chave de API da OpenAI configurada (vari√°vel OPENAI_API_KEY).",
                        classes="info-text"
                    )

                    with Horizontal(classes="action-buttons"):
                        yield Button("ü§ñ Gerar Insights com IA", variant="primary", id="btn-generate-ai")

                    yield Static("", id="ai-insights-status", classes="status-text")
                    yield ScrollableContainer(
                        Static("Aguardando gera√ß√£o de insights...", id="ai-insights-content", classes="info-text")
                    )

                with TabPane("üíæ Exportar", id="tab-export"):
                    yield Static("Exportar Resultados", classes="section-title")
                    yield Static("Escolha o formato de exporta√ß√£o:", classes="status-text")

                    with Vertical():
                        yield Static("", id="export-config-info", classes="info-text")

                        yield Static("üìÑ Nome do arquivo (sem extens√£o):", classes="info-text")
                        yield Input(
                            placeholder="relatorio_cocomo",
                            value="relatorio_cocomo",
                            id="export-filename"
                        )

                        with Horizontal(classes="action-buttons"):
                            yield Button("üíæ Exportar JSON", variant="primary", id="btn-export-json")
                            yield Button("üìÑ Exportar PDF", variant="success", id="btn-export-pdf")

                        yield Static("", id="export-status", classes="status-text")

        yield Footer()

    def on_mount(self) -> None:
        """Inicializa as tabelas"""
        # Tabela COCOMO
        cocomo_table = self.query_one("#cocomo-table", DataTable)
        cocomo_table.add_columns("M√©trica", "Valor")
        cocomo_table.cursor_type = "row"

        # Tabela Git
        git_table = self.query_one("#git-table", DataTable)
        git_table.add_columns("M√©trica", "Valor")
        git_table.cursor_type = "row"

        # Tabela de autores
        authors_table = self.query_one("#authors-table", DataTable)
        authors_table.add_columns("Autor", "Commits", "% do Total")
        authors_table.cursor_type = "row"

        # Tabela integrada
        integrated_table = self.query_one("#integrated-table", DataTable)
        integrated_table.add_columns("Indicador", "Valor")
        integrated_table.cursor_type = "row"

        # Tabelas de seguran√ßa
        security_metrics_table = self.query_one("#security-metrics-table", DataTable)
        security_metrics_table.add_columns("M√©trica", "Valor")
        security_metrics_table.cursor_type = "row"

        vulnerable_files_table = self.query_one("#vulnerable-files-table", DataTable)
        vulnerable_files_table.add_columns("Arquivo", "Problemas")
        vulnerable_files_table.cursor_type = "row"

        critical_findings_table = self.query_one("#critical-findings-table", DataTable)
        critical_findings_table.add_columns("Severidade", "Arquivo", "Linha", "Mensagem")
        critical_findings_table.cursor_type = "row"

    @on(Button.Pressed, "#btn-new-analysis")
    def action_new_analysis(self) -> None:
        """Abre tela de nova an√°lise"""
        self.push_screen(WelcomeScreen())

    @on(Button.Pressed, "#btn-analyze-current")
    def action_analyze_current(self) -> None:
        """Analisa o diret√≥rio atual"""
        current_path = Path.cwd()

        if not (current_path / '.git').exists():
            self.push_screen(ErrorScreen(f"Diret√≥rio atual n√£o √© um reposit√≥rio Git: {current_path}"))
            return

        self.start_analysis(current_path)

    def start_analysis(self, path: Path) -> None:
        """Inicia a an√°lise em background"""
        self.project_path = path

        # Mostra a barra de progresso
        progress_bar = self.query_one("#analysis-progress", ProgressBar)
        progress_label = self.query_one("#progress-label", Static)
        progress_bar.styles.display = "block"
        progress_label.styles.display = "block"
        progress_bar.update(progress=0)
        progress_label.update("üîç Iniciando an√°lise...")

        # Atualiza status
        self.query_one("#cocomo-status", Static).update("‚è≥ Analisando c√≥digo...")
        self.query_one("#git-status", Static).update("‚è≥ Analisando reposit√≥rio Git...")
        self.query_one("#integrated-status", Static).update("‚è≥ Calculando m√©tricas integradas...")

        # Executa an√°lise em worker (o @work decorator j√° cria o worker)
        self.perform_analysis(path)

    @work(thread=True)
    def perform_analysis(self, path: Path) -> None:
        """Executa a an√°lise em background"""
        try:
            # Etapa 1: An√°lise COCOMO (0-40%)
            self.call_from_thread(self.update_progress, 10, "üìä Analisando c√≥digo-fonte...")

            self.code_analyzer = CodeAnalyzer(path)
            self.code_analyzer.analyze_directory()

            self.call_from_thread(self.update_progress, 30, "üìä Calculando m√©tricas COCOMO...")

            # Etapa 2: An√°lise Git (40-70%)
            self.call_from_thread(self.update_progress, 45, "üìà Analisando reposit√≥rio Git...")

            analyzer = IntegratedAnalyzer(path)
            cocomo, git, integrated, security = analyzer.analyze(
                self.custom_salary,
                run_security_analysis=False  # Desativa an√°lise de seguran√ßa no TUI por enquanto
            )

            self.call_from_thread(self.update_progress, 70, "üìà Processando hist√≥rico de commits...")

            self.cocomo_results = cocomo
            self.git_metrics = git

            # Etapa 3: M√©tricas Integradas (70-95%)
            self.call_from_thread(self.update_progress, 85, "üéØ Calculando m√©tricas integradas...")

            self.integrated_metrics = integrated

            self.call_from_thread(self.update_progress, 95, "‚ú® Finalizando an√°lise...")

            # Atualiza a UI
            self.call_from_thread(self.update_results)

            # Completa o progresso
            self.call_from_thread(self.update_progress, 100, "‚úÖ An√°lise conclu√≠da!")

        except Exception as e:
            self.call_from_thread(self.show_error, str(e))

    def update_progress(self, progress: int, message: str) -> None:
        """Atualiza a barra de progresso"""
        progress_bar = self.query_one("#analysis-progress", ProgressBar)
        progress_label = self.query_one("#progress-label", Static)

        progress_bar.update(progress=progress)
        progress_label.update(message)

        # Esconde a barra quando completa
        if progress >= 100:
            # Aguarda um pouco para o usu√°rio ver a conclus√£o
            self.set_timer(2.0, self.hide_progress_bar)

    def hide_progress_bar(self) -> None:
        """Esconde a barra de progresso"""
        progress_bar = self.query_one("#analysis-progress", ProgressBar)
        progress_label = self.query_one("#progress-label", Static)
        progress_bar.styles.display = "none"
        progress_label.styles.display = "none"

    def update_results(self) -> None:
        """Atualiza os resultados na UI"""
        if not all([self.cocomo_results, self.git_metrics, self.integrated_metrics]):
            return

        self.update_cocomo_tab()
        self.update_git_tab()
        self.update_integrated_tab()
        self.update_export_info()

    def update_cocomo_tab(self) -> None:
        """Atualiza aba COCOMO II"""
        if not self.cocomo_results:
            return

        cocomo = self.cocomo_results
        table = self.query_one("#cocomo-table", DataTable)
        table.clear()

        table.add_row("üí∞ Sal√°rio Base (BRL/pessoa-m√™s)", f"R$ {self.custom_salary:,.2f}")
        table.add_row("", "")
        table.add_row("KLOC (Milhares de LOC)", f"{cocomo.kloc:.2f}")
        table.add_row("Complexidade", cocomo.complexity_level)
        table.add_row("Esfor√ßo (pessoa-m√™s)", f"{cocomo.effort_person_months:.2f}")
        table.add_row("Tempo (meses)", f"{cocomo.time_months:.2f}")
        table.add_row("Anos de Desenvolvimento", f"{cocomo.time_months / 12:.2f}")
        table.add_row("Pessoas Necess√°rias", f"{cocomo.people_required:.2f}")
        table.add_row("Pessoas para Manuten√ß√£o", f"{cocomo.maintenance_people:.2f}")
        table.add_row("Pessoas para Expans√£o", f"{cocomo.expansion_people:.2f}")
        table.add_row("Produtividade (LOC/pessoa-m√™s)", f"{cocomo.productivity:.0f}")
        table.add_row("Custo Estimado (BRL)", f"R$ {cocomo.cost_estimate_brl:,.2f}")

        self.query_one("#cocomo-status", Static).update("‚úÖ An√°lise COCOMO II conclu√≠da!")

    def update_git_tab(self) -> None:
        """Atualiza aba Git"""
        if not self.git_metrics:
            return

        git = self.git_metrics

        # Tabela principal
        table = self.query_one("#git-table", DataTable)
        table.clear()

        table.add_row("Total de Commits", f"{git.total_commits:,}")
        table.add_row("Total de Autores", f"{git.total_authors}")
        table.add_row("Idade do Reposit√≥rio (dias)", f"{git.repository_age_days}")
        table.add_row("Commits por Dia", f"{git.commits_per_day:.2f}")
        table.add_row("Inser√ß√µes Totais", f"{git.total_insertions:,}")
        table.add_row("Dele√ß√µes Totais", f"{git.total_deletions:,}")
        table.add_row("Mudan√ßas/Commit (m√©dia)", f"{git.avg_changes_per_commit:.1f}")
        table.add_row("Arquivos/Commit (m√©dia)", f"{git.avg_files_per_commit:.1f}")

        # Tabela de autores
        authors_table = self.query_one("#authors-table", DataTable)
        authors_table.clear()

        if git.authors_commits:
            sorted_authors = sorted(
                git.authors_commits.items(),
                key=lambda x: x[1],
                reverse=True
            )[:10]

            for author, count in sorted_authors:
                percentage = (count / git.total_commits * 100)
                authors_table.add_row(author, f"{count:,}", f"{percentage:.1f}%")

        self.query_one("#git-status", Static).update("‚úÖ An√°lise Git conclu√≠da!")

    def update_integrated_tab(self) -> None:
        """Atualiza aba Integrada"""
        if not self.integrated_metrics:
            return

        integrated = self.integrated_metrics

        # Tabela
        table = self.query_one("#integrated-table", DataTable)
        table.clear()

        table.add_row("KLOC (COCOMO)", f"{integrated.cocomo_kloc:.2f}")
        table.add_row("Esfor√ßo (pessoa-m√™s)", f"{integrated.cocomo_effort:.2f}")
        table.add_row("Tempo (meses)", f"{integrated.cocomo_time_months:.2f}")
        table.add_row("Pessoas", f"{integrated.cocomo_people:.2f}")
        table.add_row("Custo (BRL)", f"R$ {integrated.cocomo_cost_brl:,.2f}")
        table.add_row("", "")
        table.add_row("Total de Commits", f"{integrated.total_commits:,}")
        table.add_row("Commits por M√™s", f"{integrated.commits_per_month:.1f}")
        table.add_row("Linhas por Commit", f"{integrated.lines_per_commit:.1f}")
        table.add_row("Commits p/ Recriar Codebase", f"{integrated.commits_needed_to_rebuild:.0f}")
        table.add_row("", "")
        table.add_row("Velocidade Real (linhas/dia)", f"{integrated.actual_velocity:.1f}")
        table.add_row("Velocidade COCOMO (linhas/dia)", f"{integrated.estimated_velocity:.1f}")
        table.add_row("Raz√£o Velocidade (real/estimado)", f"{integrated.velocity_ratio:.2f}x")
        table.add_row("Efici√™ncia de Commit", f"{integrated.commit_efficiency:.1f}%")
        table.add_row("% Mudan√ßa M√©dia/Commit", f"{integrated.change_percentage_per_commit:.2f}%")
        table.add_row("", "")
        table.add_row("‚≠ê Score de Produtividade", f"{integrated.developer_productivity_score:.1f}/100")

        # Insights
        insights = self.generate_insights(integrated, self.git_metrics)
        self.query_one("#insights-text", Static).update(insights)

        self.query_one("#integrated-status", Static).update("‚úÖ An√°lise integrada conclu√≠da!")

    def generate_insights(self, integrated: IntegratedMetrics, git: GitMetrics) -> str:
        """Gera insights"""
        insights = []

        # Velocidade
        if integrated.velocity_ratio > 1.2:
            insights.append("üöÄ Velocidade acima do esperado - Equipe muito produtiva!")
        elif integrated.velocity_ratio > 0.8:
            insights.append("‚úì Velocidade dentro do esperado")
        else:
            insights.append("‚ö†Ô∏è  Velocidade abaixo do esperado - Revisar impedimentos")

        # Efici√™ncia
        if integrated.commit_efficiency > 50:
            insights.append("‚úì Alta efici√™ncia de commits - Baixo retrabalho")
        elif integrated.commit_efficiency > 30:
            insights.append("‚ö° Efici√™ncia moderada - Algum retrabalho presente")
        else:
            insights.append("‚ö†Ô∏è  Baixa efici√™ncia - Alto retrabalho (churn)")

        # Tamanho de commits
        if integrated.change_percentage_per_commit < 1:
            insights.append("‚úì Commits pequenos e incrementais - Boa pr√°tica")
        elif integrated.change_percentage_per_commit < 5:
            insights.append("‚ö° Tamanho de commit moderado")
        else:
            insights.append("‚ö†Ô∏è  Commits muito grandes - Considere commits menores")

        # Frequ√™ncia
        if integrated.commits_per_month > 40:
            insights.append("‚úì Alta frequ√™ncia de commits - Desenvolvimento ativo")
        elif integrated.commits_per_month > 20:
            insights.append("‚ö° Frequ√™ncia moderada de commits")
        else:
            insights.append("üìä Baixa frequ√™ncia de commits")

        # Score
        if integrated.developer_productivity_score >= 75:
            insights.append("üåü Excelente produtividade da equipe!")
        elif integrated.developer_productivity_score >= 50:
            insights.append("üëç Boa produtividade geral")
        else:
            insights.append("üìà Oportunidade de melhoria na produtividade")

        return "\n".join(insights)

    def update_export_info(self) -> None:
        """Atualiza informa√ß√µes de exporta√ß√£o"""
        info_text = f"üí∞ Sal√°rio usado nos c√°lculos: R$ {self.custom_salary:,.2f}/pessoa-m√™s\n" \
                    f"üìÅ Projeto: {self.project_path.name if self.project_path else 'N/A'}"
        self.query_one("#export-config-info", Static).update(info_text)

    @on(Button.Pressed, "#btn-export-json")
    def action_export_json(self) -> None:
        """Exporta para JSON"""
        if not all([self.cocomo_results, self.git_metrics, self.integrated_metrics]):
            self.query_one("#export-status", Static).update("‚ùå Execute uma an√°lise primeiro!")
            return

        filename = self.query_one("#export-filename", Input).value.strip()
        if not filename:
            filename = "relatorio_cocomo"

        output_path = Path(f"{filename}.json")

        try:
            data = {
                'project_name': self.project_path.name if self.project_path else "Projeto",
                'project_path': str(self.project_path) if self.project_path else "",
                'analysis_type': 'integrated',
                'generated_at': datetime.now().isoformat(),
                'custom_salary_brl': self.custom_salary,
                'cocomo': asdict(self.cocomo_results),
                'git': self.git_metrics.to_dict(),
                'integrated': asdict(self.integrated_metrics),
            }

            # Inclui insights de IA se foram gerados
            if self.ai_insights_generated and self.ai_insights_data:
                data['ai_insights'] = self.ai_insights_data

            # Inclui an√°lise de seguran√ßa se foi executada
            if self.security_metrics:
                data['security'] = self.security_metrics.to_dict()
                data['security_score'] = self.get_security_score(self.security_metrics)

            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

            self.query_one("#export-status", Static).update(f"‚úÖ JSON exportado: {output_path}")

        except Exception as e:
            self.query_one("#export-status", Static).update(f"‚ùå Erro ao exportar: {e}")

    @on(Button.Pressed, "#btn-export-pdf")
    def action_export_pdf(self) -> None:
        """Exporta para PDF"""
        if not all([self.cocomo_results, self.git_metrics, self.integrated_metrics]):
            self.query_one("#export-status", Static).update("‚ùå Execute uma an√°lise primeiro!")
            return

        filename = self.query_one("#export-filename", Input).value.strip()
        if not filename:
            filename = "relatorio_cocomo"

        # Primeiro exporta JSON tempor√°rio
        temp_json = Path(f"{filename}_temp.json")
        output_pdf = Path(f"{filename}.pdf")

        try:
            self.query_one("#export-status", Static).update("‚è≥ Gerando PDF...")

            # Cria JSON tempor√°rio
            data = {
                'project_name': self.project_path.name if self.project_path else "Projeto",
                'project_path': str(self.project_path) if self.project_path else "",
                'analysis_type': 'integrated',
                'generated_at': datetime.now().isoformat(),
                'custom_salary_brl': self.custom_salary,
                'cocomo': asdict(self.cocomo_results),
                'git': self.git_metrics.to_dict(),
                'integrated': asdict(self.integrated_metrics),
            }

            # Inclui insights de IA se foram gerados
            if self.ai_insights_generated and self.ai_insights_data:
                data['ai_insights'] = self.ai_insights_data

            # Inclui an√°lise de seguran√ßa se foi executada
            if self.security_metrics:
                data['security'] = self.security_metrics.to_dict()
                data['security_score'] = self.get_security_score(self.security_metrics)

            with open(temp_json, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

            # Gera PDF
            generate_pdf_report(str(temp_json), str(output_pdf))

            # Remove JSON tempor√°rio
            temp_json.unlink()

            self.query_one("#export-status", Static).update(f"‚úÖ PDF exportado: {output_pdf}")

        except Exception as e:
            self.query_one("#export-status", Static).update(f"‚ùå Erro ao exportar: {e}")
            if temp_json.exists():
                temp_json.unlink()

    def show_error(self, message: str) -> None:
        """Mostra erro"""
        # Esconde a barra de progresso
        self.hide_progress_bar()

        self.push_screen(ErrorScreen(message))
        self.query_one("#cocomo-status", Static).update(f"‚ùå Erro: {message}")
        self.query_one("#git-status", Static).update(f"‚ùå Erro: {message}")
        self.query_one("#integrated-status", Static).update(f"‚ùå Erro: {message}")

    def action_reload(self) -> None:
        """Recarrega an√°lise"""
        if self.project_path:
            self.start_analysis(self.project_path)
        else:
            self.push_screen(WelcomeScreen())

    def action_quit(self) -> None:
        """Sai do app"""
        self.exit()

    @on(Button.Pressed, "#btn-generate-ai")
    def action_generate_ai_insights(self) -> None:
        """Gera insights usando IA da OpenAI"""
        if not all([self.cocomo_results, self.code_analyzer]):
            self.query_one("#ai-insights-status", Static).update(
                "‚ùå Execute uma an√°lise primeiro antes de gerar insights com IA!"
            )
            return

        # Verifica se a chave API est√° dispon√≠vel
        import os
        if not os.getenv("OPENAI_API_KEY"):
            self.query_one("#ai-insights-status", Static).update(
                "‚ùå Configure a vari√°vel de ambiente OPENAI_API_KEY com sua chave da OpenAI"
            )
            return

        self.query_one("#ai-insights-status", Static).update("‚è≥ Gerando insights com IA...")
        self.query_one("#ai-insights-content", Static).update("Processando...")

        # Executa gera√ß√£o em worker
        self.generate_ai_insights_worker()

    @work(thread=True)
    def generate_ai_insights_worker(self) -> None:
        """Gera insights de IA em background"""
        try:
            from ai_insights import generate_ai_insights

            project_name = self.project_path.name if self.project_path else "Projeto"

            insights_result = generate_ai_insights(
                cocomo=self.cocomo_results,
                git=self.git_metrics,
                integrated=self.integrated_metrics,
                code_metrics=self.code_analyzer.metrics if self.code_analyzer else None,
                project_name=project_name
            )

            self.call_from_thread(self.update_ai_insights, insights_result)

        except Exception as e:
            error_msg = f"‚ùå Erro ao gerar insights: {str(e)}"
            self.call_from_thread(self.show_ai_error, error_msg)

    def update_ai_insights(self, insights_result: dict) -> None:
        """Atualiza os insights de IA na UI"""
        from insights import build_ai_insights
        from ai_insights import AIInsightsGenerator

        self.ai_insights_generated = True
        self.ai_insights_data = insights_result  # Armazena os dados estruturados

        # Formata para exibi√ß√£o
        generator = AIInsightsGenerator()
        insights_text = generator.format_insights_for_display(insights_result)

        self.query_one("#ai-insights-status", Static).update("‚úÖ Insights gerados com sucesso!")
        self.query_one("#ai-insights-content", Static).update(insights_text)

    def show_ai_error(self, error_msg: str) -> None:
        """Mostra erro na gera√ß√£o de insights"""
        self.query_one("#ai-insights-status", Static).update(error_msg)
        self.query_one("#ai-insights-content", Static).update(
            "[red]N√£o foi poss√≠vel gerar insights. Verifique sua chave API e tente novamente.[/red]"
        )

    @on(Button.Pressed, "#btn-run-security")
    def action_run_security_analysis(self) -> None:
        """Executa a an√°lise de seguran√ßa"""
        if not self.project_path:
            self.query_one("#security-status", Static).update(
                "‚ùå Execute uma an√°lise do projeto primeiro!"
            )
            return

        self.query_one("#security-status", Static).update("‚è≥ Executando an√°lise de seguran√ßa...")

        # Executa an√°lise em worker
        self.run_security_analysis_worker()

    @work(thread=True)
    def run_security_analysis_worker(self) -> None:
        """Executa a an√°lise de seguran√ßa em background"""
        try:
            analyzer = SecurityAnalyzer(self.project_path)

            # Verifica se o Semgrep est√° dispon√≠vel
            if not analyzer.check_semgrep_available():
                error_msg = "‚ùå Semgrep n√£o est√° instalado. Instale com: pip install semgrep"
                self.call_from_thread(self.show_security_error, error_msg)
                return

            # Executa a an√°lise
            metrics = analyzer.analyze(config='auto', max_findings=100)

            self.call_from_thread(self.update_security_results, metrics)

        except Exception as e:
            error_msg = f"‚ùå Erro ao executar an√°lise de seguran√ßa: {str(e)}"
            self.call_from_thread(self.show_security_error, error_msg)

    def update_security_results(self, metrics: SecurityMetrics) -> None:
        """Atualiza os resultados da an√°lise de seguran√ßa na UI"""
        self.security_metrics = metrics

        # Atualiza status
        security_score = self.get_security_score(metrics)
        self.query_one("#security-status", Static).update(
            f"‚úÖ An√°lise conclu√≠da! Score de Seguran√ßa: {security_score:.1f}/100"
        )

        # Atualiza tabela de m√©tricas
        metrics_table = self.query_one("#security-metrics-table", DataTable)
        metrics_table.clear()

        metrics_table.add_row("üéØ Score de Seguran√ßa", f"{security_score:.1f}/100")
        metrics_table.add_row("", "")
        metrics_table.add_row("Total de Descobertas", f"{metrics.total_findings:,}")
        metrics_table.add_row("  ‚Ä¢ Cr√≠ticas", f"{metrics.critical_findings}")
        metrics_table.add_row("  ‚Ä¢ Altas", f"{metrics.high_findings}")
        metrics_table.add_row("  ‚Ä¢ M√©dias", f"{metrics.medium_findings}")
        metrics_table.add_row("  ‚Ä¢ Baixas", f"{metrics.low_findings}")
        metrics_table.add_row("  ‚Ä¢ Informativas", f"{metrics.info_findings}")
        metrics_table.add_row("", "")
        metrics_table.add_row("Problemas de Seguran√ßa", f"{metrics.security_issues}")
        metrics_table.add_row("Problemas de Best Practice", f"{metrics.best_practice_issues}")
        metrics_table.add_row("Problemas de Performance", f"{metrics.performance_issues}")
        metrics_table.add_row("", "")
        metrics_table.add_row("Arquivos Escaneados", f"{metrics.files_scanned}")
        metrics_table.add_row("Tempo de Scan", f"{metrics.scan_duration_seconds:.2f}s")

        # Atualiza tabela de arquivos vulner√°veis
        vulnerable_files_table = self.query_one("#vulnerable-files-table", DataTable)
        vulnerable_files_table.clear()

        sorted_files = sorted(
            metrics.files_with_issues.items(),
            key=lambda x: x[1],
            reverse=True
        )[:10]

        for file_path, count in sorted_files:
            # Encurta o caminho se for muito longo
            display_path = file_path
            if len(display_path) > 60:
                display_path = "..." + display_path[-57:]
            vulnerable_files_table.add_row(display_path, f"{count}")

        # Atualiza tabela de descobertas cr√≠ticas e altas
        critical_findings_table = self.query_one("#critical-findings-table", DataTable)
        critical_findings_table.clear()

        critical_and_high = [
            f for f in metrics.findings
            if f.severity in ['CRITICAL', 'HIGH']
        ][:15]  # Limita a 15 descobertas

        for finding in critical_and_high:
            # Encurta o caminho do arquivo
            display_path = finding.file_path
            if len(display_path) > 40:
                display_path = "..." + display_path[-37:]

            # Encurta a mensagem
            message = finding.message
            if len(message) > 50:
                message = message[:47] + "..."

            critical_findings_table.add_row(
                finding.severity,
                display_path,
                f"{finding.line}",
                message
            )

    def get_security_score(self, metrics: SecurityMetrics) -> float:
        """Calcula o score de seguran√ßa"""
        if metrics.total_findings == 0:
            return 100.0

        # Pesos por severidade
        critical_weight = 10
        high_weight = 5
        medium_weight = 2
        low_weight = 1

        # Calcula pontua√ß√£o negativa
        negative_score = (
            metrics.critical_findings * critical_weight +
            metrics.high_findings * high_weight +
            metrics.medium_findings * medium_weight +
            metrics.low_findings * low_weight
        )

        # Normaliza para 0-100
        import math
        if negative_score == 0:
            return 100.0

        score = max(0, 100 - (math.log1p(negative_score) * 10))
        return round(score, 2)

    def show_security_error(self, error_msg: str) -> None:
        """Mostra erro na an√°lise de seguran√ßa"""
        self.query_one("#security-status", Static).update(error_msg)


def main():
    """Fun√ß√£o principal"""
    app = CocomoIIAnalyzerApp()
    app.run()


if __name__ == "__main__":
    main()
